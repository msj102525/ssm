DROP TABLE TB_EMPLOYEE CASCADE CONSTRAINTS;

CREATE TABLE TB_EMPLOYEE (
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30) NOT NULL,
    POSITION VARCHAR2(20) NOT NULL,
    EMP_HIREDATE DATE NOT NULL,
    EMP_PHONE VARCHAR2(15) NOT NULL,
    EMP_EMAIL VARCHAR2(30) NOT NULL,
    EMP_ADDRESS VARCHAR2(50) NOT NULL,
    EMP_BIRTHDATE DATE NOT NULL,
    EMP_GENDER VARCHAR2(1) CHECK (EMP_GENDER IN ('M', 'F')) NOT NULL,
    PRIMARY KEY(EMP_ID) 
);

COMMENT ON TABLE TB_EMPLOYEE IS '직원정보';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_ID IS '직원번호';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_NAME IS '직원이름';
COMMENT ON COLUMN TB_EMPLOYEE.POSITION IS '직급';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_HIREDATE IS '입사날짜';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_PHONE IS '전화번호';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_EMAIL IS '이메일';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_ADDRESS IS '주소';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_BIRTHDATE IS '생년월일';
COMMENT ON COLUMN TB_EMPLOYEE.EMP_GENDER IS '성별';


DROP TABLE TB_COMMUTE_INFO CONSTRAINTS;
CREATE TABLE TB_COMMUTE_INFO (
EMP_ID NUMBER NOT NULL,
START_TIME DATE,
WORK_DAY DATE,
END_TIME DATE,
WORKING_HOURS VARCHAR2(30),
LATE_FLAG VARCHAR2(1) CHECK (LATE_FLAG IN ('N', 'Y')),
LEAVE_EARLY VARCHAR2(1) CHECK (LEAVE_EARLY IN ('N', 'Y')),
ABSENTEEISM VARCHAR2(1) CHECK (ABSENTEEISM IN ('N', 'Y')),
FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE(EMP_ID)
);

COMMENT ON TABLE TB_COMMUTE_INFO IS '근태정보';
COMMENT ON COLUMN TB_COMMUTE_INFO.EMP_ID IS '직원번호';
COMMENT ON COLUMN TB_COMMUTE_INFO.START_TIME IS '출근시간';
COMMENT ON COLUMN TB_COMMUTE_INFO.WORK_DAY IS '근무일';
COMMENT ON COLUMN TB_COMMUTE_INFO.END_TIME IS '퇴근시간';
COMMENT ON COLUMN TB_COMMUTE_INFO.WORKING_HOURS IS '근무시간';
COMMENT ON COLUMN TB_COMMUTE_INFO.LATE_FLAG IS '지각여부';
COMMENT ON COLUMN TB_COMMUTE_INFO.LEAVE_EARLY IS '조퇴여부';
COMMENT ON COLUMN TB_COMMUTE_INFO.ABSENTEEISM IS '결근여부';

COMMIT;

DROP TABLE TB_CALENDAR CONSTRAINTS;
CREATE TABLE TB_CALENDAR (
EMP_ID NUMBER NOT NULL,
REMARKS VARCHAR2(3000),
FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE(EMP_ID)
);

COMMENT ON TABLE TB_CALENDAR IS '직원 스케줄';
COMMENT ON COLUMN TB_CALENDAR.EMP_ID IS '직원번호';
COMMENT ON COLUMN TB_CALENDAR.REMARKS IS '특이사항';


DROP TABLE TB_SALARY_INFO  CONSTRAINTS;
CREATE TABLE TB_SALARY_INFO (
EMP_ID NUMBER NOT NULL,
BANK_NAME VARCHAR2(30) NOT NULL,
BANK_ACCOUNT_NO VARCHAR2(20) NOT NULL,
ACCOUNT_HOLDER VARCHAR2(30) NOT NULL, --보류
PREMIUM VARCHAR2(15),
TAX VARCHAR2(15),
FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE(EMP_ID)
);

COMMENT ON TABLE TB_SALARY_INFO IS '급여 정보';
COMMENT ON COLUMN TB_SALARY_INFO.EMP_ID IS '직원번호';
COMMENT ON COLUMN TB_SALARY_INFO.BANK_NAME IS '은행이름';
COMMENT ON COLUMN TB_SALARY_INFO.BANK_ACCOUNT_NO IS '계좌번호';
COMMENT ON COLUMN TB_SALARY_INFO.ACCOUNT_HOLDER IS '예금주';
COMMENT ON COLUMN TB_SALARY_INFO.PREMIUM IS '보험료';
COMMENT ON COLUMN TB_SALARY_INFO.TAX IS '세금';
COMMIT;

DROP SEQUENCE EMP_ID_SEQ;

CREATE SEQUENCE EMP_ID_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

DROP SEQUENCE USER_SEQ;
DROP TABLE TB_STORE CASCADE CONSTRAINTS;
DROP TABLE TB_USER CASCADE CONSTRAINTS;
DROP TABLE TB_USER_FINKOUT CASCADE CONSTRAINTS;

CREATE SEQUENCE USER_SEQ
NOCYCLE
NOCACHE;


CREATE TABLE TB_USER (
    ID int PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    PASSWD VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL UNIQUE,
    USER_NO VARCHAR2(20) NOT NULL,
    PHONE VARCHAR2(20) NOT NULL,
    ACCOUNT_NUMBER VARCHAR2(20) NOT NULL,
    BANK_NAME VARCHAR2(20) NOT NULL,
    PROFILE_URL VARCHAR2(200) NULL,
    IS_QUIT CHAR DEFAULT 'N',
    ADMIN_OK CHAR DEFAULT 'N',
    LOGIN_OK CHAR DEFAULT 'Y',
    LAST_MODIFIED DATE DEFAULT SYSDATE,
    SERVICE_DATE DATE DEFAULT SYSDATE,
    BUSINESS_NO VARCHAR2(50),
    BUSINESS_STORE_NAME VARCHAR2(50) NOT NULL
);

COMMENT ON COLUMN TB_USER.ID IS '유저번호';
COMMENT ON COLUMN TB_USER.USER_ID IS '아이디';
COMMENT ON COLUMN TB_USER.PASSWD IS '비밀번호';
COMMENT ON COLUMN TB_USER.EMAIL IS '이메일';
COMMENT ON COLUMN TB_USER.USER_NO IS '주민번호';
COMMENT ON COLUMN TB_USER.PHONE IS '전화번호';
COMMENT ON COLUMN TB_USER.ACCOUNT_NUMBER IS '계좌번호';
COMMENT ON COLUMN TB_USER.BANK_NAME IS '은행명';
COMMENT ON COLUMN TB_USER.PROFILE_URL IS '프로필사진URL';
COMMENT ON COLUMN TB_USER.IS_QUIT IS '탈퇴여부';
COMMENT ON COLUMN TB_USER.LOGIN_OK IS '로그인가능여부';
COMMENT ON COLUMN TB_USER.LAST_MODIFIED IS '마지막수정일';
COMMENT ON COLUMN TB_USER.BUSINESS_NO IS '사업자번호';
COMMENT ON COLUMN TB_USER.BUSINESS_STORE_NAME IS '사업장명';

ALTER TABLE TB_USER
MODIFY (ACCOUNT_NUMBER VARCHAR2(20) null);

ALTER TABLE TB_USER
MODIFY (BANK_NAME VARCHAR2(20) NULL);

ALTER TABLE TB_USER
MODIFY (PASSWD VARCHAR2(100));

COMMIT;

CREATE TABLE TB_USER_FINKOUT (
    FINKOUT_NO INT,
    USER_ID VARCHAR2(50),
    EMAIL VARCHAR2(50),
    FINKOUT_DATE DATE DEFAULT SYSDATE,
    FOREIGN KEY (FINKOUT_NO) REFERENCES TB_USER (ID)
);

COMMENT ON COLUMN TB_USER_FINKOUT.FINKOUT_NO IS '탈퇴유저번호';
COMMENT ON COLUMN TB_USER_FINKOUT.USER_ID IS '탈퇴유저아이디';
COMMENT ON COLUMN TB_USER_FINKOUT.EMAIL IS '탈퇴유저이메일';
COMMENT ON COLUMN TB_USER_FINKOUT.FINKOUT_DATE IS '탈퇴일자';

COMMIT;



--DROP INDEX PK_TB_SUBSCRIBE;
DROP TABLE TB_SUBSCRIBE CASCADE CONSTRAINTS;
	
CREATE TABLE TB_SUBSCRIBE (
	SUBSCRIBE_NO NUMBER NOT NULL,
	SUBSCRIBE_NAME VARCHAR2(200) NOT NULL,
	PRICE NUMBER NOT NULL,
	SUBSCRIBE_DATE VARCHAR2(10)
);

COMMENT ON TABLE TB_SUBSCRIBE IS '구독상품';

COMMENT ON COLUMN TB_SUBSCRIBE.SUBSCRIBE_NO IS '상품번호';

COMMENT ON COLUMN TB_SUBSCRIBE.SUBSCRIBE_NAME IS '상품명';

COMMENT ON COLUMN TB_SUBSCRIBE.PRICE IS '가격';

COMMENT ON COLUMN TB_SUBSCRIBE.SUBSCRIBE_DATE IS '몇개월인지';

CREATE UNIQUE INDEX PK_TB_SUBSCRIBE
	ON TB_SUBSCRIBE (
		SUBSCRIBE_NO ASC
	);

ALTER TABLE TB_SUBSCRIBE
	ADD
		CONSTRAINT PK_TB_SUBSCRIBE
		PRIMARY KEY (
			SUBSCRIBE_NO
		);

ALTER TABLE TB_SUBSCRIBE_PAYMENT DROP CONSTRAINT PK_TB_SUBSCRIBE_PAYMENT;

--DROP INDEX PK_TB_SUBSCRIBE_PAYMENT;

DROP TABLE TB_SUBSCRIBE_PAYMENT 
	CASCADE CONSTRAINTS;

CREATE TABLE TB_SUBSCRIBE_PAYMENT (
	PAY_NO NUMBER NOT NULL,
	SUBSCRIBE_NAME VARCHAR2(100) NOT NULL,
	AMOUNT NUMBER,
	USER_ID NUMBER,
	PAY_METHOD VARCHAR2(50) NOT NULL,
	PAY_DATE DATE DEFAULT SYSDATE NOT NULL
);

COMMENT ON TABLE TB_SUBSCRIBE_PAYMENT IS '구독결제';

COMMENT ON COLUMN TB_SUBSCRIBE_PAYMENT.PAY_NO IS '결제번호';

COMMENT ON COLUMN TB_SUBSCRIBE_PAYMENT.USER_ID IS '결제 유저';

COMMENT ON COLUMN TB_SUBSCRIBE_PAYMENT.PAY_METHOD IS '결제수단';

COMMENT ON COLUMN TB_SUBSCRIBE_PAYMENT.PAY_DATE IS '결제일시';

CREATE UNIQUE INDEX PK_TB_SUBSCRIBE_PAYMENT
	ON TB_SUBSCRIBE_PAYMENT (
		PAY_NO ASC
	);

ALTER TABLE TB_SUBSCRIBE_PAYMENT
	ADD
		CONSTRAINT PK_TB_SUBSCRIBE_PAYMENT
		PRIMARY KEY (
			PAY_NO
		);

ALTER TABLE TB_SUBSCRIBE_PAYMENT
ADD CONSTRAINT FK_TB_USER_TO_TB_SUBSCRIBE_PAYMENT
FOREIGN KEY (USER_ID)
REFERENCES TB_USER (ID)
ON DELETE SET NULL;




ALTER TABLE TB_NOTICE DROP CONSTRAINT PK_TB_NOTICE;
--DROP INDEX PK_TB_NOTICE;
DROP TABLE TB_NOTICE 
	CASCADE CONSTRAINTS;

CREATE TABLE TB_NOTICE (
	NOTICE_NO NUMBER NOT NULL,
	WRITER NUMBER,
	NOTICE_TITLE VARCHAR2(300) NOT NULL,
	NOTICE_CONTENT VARCHAR2(3000) NOT NULL,
	WRITE_DATE DATE DEFAULT SYSDATE NOT NULL,
	MODIFY_DATE DATE DEFAULT SYSDATE NOT NULL,
	READ_COUNT NUMBER NOT NULL,
	IMPORTANCY VARCHAR2(1) DEFAULT '1' NOT NULL
);

COMMENT ON TABLE TB_NOTICE IS '공지사항';

COMMENT ON COLUMN TB_NOTICE.NOTICE_NO IS '공지번호';

COMMENT ON COLUMN TB_NOTICE.NOTICE_TITLE IS '제목';

COMMENT ON COLUMN TB_NOTICE.NOTICE_CONTENT IS '내용';

COMMENT ON COLUMN TB_NOTICE.WRITE_DATE IS '작성일';

COMMENT ON COLUMN TB_NOTICE.MODIFY_DATE IS '수정날짜';

COMMENT ON COLUMN TB_NOTICE.READ_COUNT IS '조회수';

COMMENT ON COLUMN TB_NOTICE.IMPORTANCY IS '중요도';

CREATE UNIQUE INDEX PK_TB_NOTICE
	ON TB_NOTICE (
		NOTICE_NO ASC
	);

ALTER TABLE TB_NOTICE
	ADD
		CONSTRAINT PK_TB_NOTICE
		PRIMARY KEY (
			NOTICE_NO
		);

ALTER TABLE TB_NOTICE
	ADD CONSTRAINT FK_TB_USER_TO_TB_NOTICE
	FOREIGN KEY (WRITER)
	REFERENCES TB_USER (ID)
	ON DELETE SET NULL;




--DROP INDEX PK_TB_INCONVINIENCE;

DROP TABLE TB_INCONVINIENCE_BOARD CASCADE CONSTRAINTS;

CREATE TABLE TB_INCONVINIENCE_BOARD (
	BOARD_NO NUMBER NOT NULL,
	WRITER NUMBER NOT NULL,
	BOARD_TITLE VARCHAR2(300) NOT NULL,
	BOARD_CONTENT VARCHAR2(3000) NOT NULL,
	WRITE_DATE DATE DEFAULT SYSDATE NOT NULL,
	MODIFY_DATE DATE DEFAULT SYSDATE NOT NULL,
	STATUS VARCHAR2(1) NOT NULL
);

COMMENT ON TABLE TB_INCONVINIENCE_BOARD IS '불편사항게시판';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.BOARD_NO IS '게시글번호';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.WRITER IS '작성자';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.BOARD_TITLE IS '제목';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.BOARD_CONTENT IS '내용';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.WRITE_DATE IS '작성일';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.MODIFY_DATE IS '수정날짜';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD.STATUS IS '조치상태';

CREATE UNIQUE INDEX PK_TB_INCONVINIENCE
	ON TB_INCONVINIENCE_BOARD (
		BOARD_NO ASC
	);

ALTER TABLE TB_INCONVINIENCE_BOARD
	ADD
		CONSTRAINT PK_TB_INCONVINIENCE
		PRIMARY KEY (
			BOARD_NO
		);

ALTER TABLE TB_INCONVINIENCE_BOARD
	ADD CONSTRAINT FK_TB_USER_TO_TB_INCONVINIENCE_BOARD
	FOREIGN KEY (WRITER)
	REFERENCES TB_USER (ID)
	ON DELETE SET NULL;


ALTER TABLE TB_INCONVINIENCE_BOARD_REPLY DROP CONSTRAINT PK_TB_INCONVINIENCE_REPLY;

--DROP INDEX PK_TB_INCONVINIENCE_REPLY;

DROP TABLE TB_INCONVINIENCE_BOARD_REPLY 
	CASCADE CONSTRAINTS;

CREATE TABLE TB_INCONVINIENCE_BOARD_REPLY (
	BOARD_NO NUMBER NOT NULL,
	WRITER NUMBER,
	WRITE_DATE DATE DEFAULT SYSDATE NOT NULL,
	COMMENT_CONTENT VARCHAR2(500) NOT NULL
);

COMMENT ON TABLE TB_INCONVINIENCE_BOARD_REPLY IS '불편사항게시판댓글';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD_REPLY.BOARD_NO IS '원글번호';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD_REPLY.WRITER IS '작성자';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD_REPLY.WRITE_DATE IS '작성날짜';

COMMENT ON COLUMN TB_INCONVINIENCE_BOARD_REPLY.COMMENT_CONTENT IS '댓글내용';

CREATE UNIQUE INDEX PK_TB_INCONVINIENCE_REPLY
	ON TB_INCONVINIENCE_BOARD_REPLY (
		BOARD_NO ASC
	);

ALTER TABLE TB_INCONVINIENCE_BOARD_REPLY
	ADD
		CONSTRAINT PK_TB_INCONVINIENCE_REPLY
		PRIMARY KEY (
			BOARD_NO
		);

ALTER TABLE TB_INCONVINIENCE_BOARD_REPLY
	ADD CONSTRAINT FK_TB_INCONVINIENCE_BOARD_TO_TB_INCONVINIENCE_BOARD_REPLY
	FOREIGN KEY (BOARD_NO)
	REFERENCES TB_INCONVINIENCE_BOARD (BOARD_NO)
	ON DELETE SET NULL;

ALTER TABLE TB_INCONVINIENCE_BOARD_REPLY
	ADD CONSTRAINT FK_TB_USER_TO_TB_INCONVINIENCE_BOARD_REPLY
	FOREIGN KEY (WRITER)
	REFERENCES TB_USER (ID)
	ON DELETE SET NULL;



ALTER TABLE TB_USER_SUSPENSION DROP CONSTRAINT PK_TB_USER_SUSPENSION;

--DROP INDEX PK_TB_USER_SUSPENSION;

DROP TABLE TB_USER_SUSPENSION 
	CASCADE CONSTRAINTS;

CREATE TABLE TB_USER_SUSPENSION (
	SUSPENSION_NO NUMBER NOT NULL,
	TARGET_ACCOUNT NUMBER,
	SUSPENSION_START DATE DEFAULT SYSDATE NOT NULL,
	SUSPENSION_END DATE DEFAULT SYSDATE,
	SUSPENSION_TITLE VARCHAR2(100) NOT NULL,
	SUSPENSION_CONTENT VARCHAR2(600)
);

COMMENT ON TABLE TB_USER_SUSPENSION IS '정지내역';

COMMENT ON COLUMN TB_USER_SUSPENSION.SUSPENSION_NO IS '정지번호';

COMMENT ON COLUMN TB_USER_SUSPENSION.TARGET_ACCOUNT IS '정지 유저';

COMMENT ON COLUMN TB_USER_SUSPENSION.SUSPENSION_START IS '정지시작날짜';

COMMENT ON COLUMN TB_USER_SUSPENSION.SUSPENSION_END IS '정지해제날짜';

COMMENT ON COLUMN TB_USER_SUSPENSION.SUSPENSION_TITLE IS '정지사유';

COMMENT ON COLUMN TB_USER_SUSPENSION.SUSPENSION_CONTENT IS '정지상세';

CREATE UNIQUE INDEX PK_TB_USER_SUSPENSION
	ON TB_USER_SUSPENSION (
		SUSPENSION_NO ASC
	);

ALTER TABLE TB_USER_SUSPENSION
	ADD
		CONSTRAINT PK_TB_USER_SUSPENSION
		PRIMARY KEY (
			SUSPENSION_NO
		);

ALTER TABLE TB_USER_SUSPENSION
	ADD CONSTRAINT FK_TB_USER_TO_TB_USER_SUSPENSION
	FOREIGN KEY (TARGET_ACCOUNT)
	REFERENCES TB_USER (ID)
	ON DELETE SET NULL;





-- TB_EMPLOYEE 테이블 생성 프로시저
CREATE OR REPLACE PROCEDURE CREATE_TB_EMPLOYEE (p_user_id IN NUMBER) IS
BEGIN
    EXECUTE IMMEDIATE 'CREATE TABLE TB_EMPLOYEE_' || p_user_id || ' (
        EMP_ID NUMBER,
        EMP_NAME VARCHAR2(30) NOT NULL,
        POSITION VARCHAR2(20) NOT NULL,
        EMP_HIREDATE DATE NOT NULL,
        EMP_PHONE VARCHAR2(15) NOT NULL,
        EMP_EMAIL VARCHAR2(30) NOT NULL,
        EMP_ADDRESS VARCHAR2(50) NOT NULL,
        EMP_BIRTHDATE DATE NOT NULL,
        EMP_GENDER VARCHAR2(1) CHECK (EMP_GENDER IN (''M'', ''F'')) NOT NULL,
        PRIMARY KEY(EMP_ID)
    )';
END;
/

-- TB_COMMUTE_INFO 테이블 생성 프로시저
CREATE OR REPLACE PROCEDURE CREATE_TB_COMMUTE_INFO (p_user_id IN NUMBER) IS
BEGIN
    EXECUTE IMMEDIATE 'CREATE TABLE TB_COMMUTE_INFO_' || p_user_id || ' (
        EMP_ID NUMBER NOT NULL,
        START_TIME DATE,
        WORK_DAY DATE,
        END_TIME DATE,
        WORKING_HOURS VARCHAR2(30),
        LATE_FLAG VARCHAR2(1) CHECK (LATE_FLAG IN (''N'', ''Y'')),
        LEAVE_EARLY VARCHAR2(1) CHECK (LEAVE_EARLY IN (''N'', ''Y'')),
        ABSENTEEISM VARCHAR2(1) CHECK (ABSENTEEISM IN (''N'', ''Y'')),
        FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || '(EMP_ID)
    )';
END;
/

-- TB_CALENDAR 테이블 생성 프로시저
CREATE OR REPLACE PROCEDURE CREATE_TB_CALENDAR (p_user_id IN NUMBER) IS
BEGIN
    EXECUTE IMMEDIATE 'CREATE TABLE TB_CALENDAR_' || p_user_id || ' (
        EMP_ID NUMBER NOT NULL,
        REMARKS VARCHAR2(3000),
        FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || '(EMP_ID)
    )';
END;
/

-- TB_SALARY_INFO 테이블 생성 프로시저
CREATE OR REPLACE PROCEDURE CREATE_TB_SALARY_INFO (p_user_id IN NUMBER) IS
BEGIN
    EXECUTE IMMEDIATE 'CREATE TABLE TB_SALARY_INFO_' || p_user_id || ' (
        EMP_ID NUMBER NOT NULL,
        BANK_NAME VARCHAR2(30) NOT NULL,
        BANK_ACCOUNT_NO VARCHAR2(20) NOT NULL,
        ACCOUNT_HOLDER VARCHAR2(30) NOT NULL,
        PREMIUM VARCHAR2(15),
        TAX VARCHAR2(15),
        FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || '(EMP_ID)
    )';
END;
/
CREATE OR REPLACE PROCEDURE CREATE_TB_POS (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_POS_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
                            POS_NO NUMBER PRIMARY KEY
                            )';
    END;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_TB_TABLE (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_TABLE_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
                            TABLE_NO NUMBER PRIMARY KEY, 
                            TABLE_NAME VARCHAR2(60) NOT NULL,
                            TABLE_X NUMBER NOT NULL,
                            TABLE_Y NUMBER NOT NULL
                            )';
    END;
END;
/
CREATE OR REPLACE PROCEDURE CREATE_TB_MENU (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_MENU_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
                            MENU_NO NUMBER PRIMARY KEY,
                            MENU_NAME VARCHAR2(60) NOT NULL,
                            PRICE NUMBER NOT NULL
                            )';
    END;
END;
/
-------------------------------------
-- 예약관리 TABLE 생성
-------------------------------------
CREATE OR REPLACE PROCEDURE PR_CREATE_TB_RESERVATION_TABLE (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(200);
    v_str VARCHAR2(2000);
BEGIN
   -- 유저 아이디를 이용하여 테이블 이름 생성
   v_table_name := 'TB_RESERVATION_' || RTRIM(LTRIM(TO_CHAR(p_user_id)));
   dbms_output.put_line(v_table_name);
   
   BEGIN
      v_str := 'CREATE TABLE ' || v_table_name || '(' ||
               '   RSRV_NUM NUMBER NOT NULL ' ||
               ' ,RSRV_DATE VARCHAR2(8) ' ||
               ' ,RSRV_TIME VARCHAR2(6) ' ||
               ' ,RSRV_NAME VARCHAR2(50) ' ||
               ' ,RSRV_TELNO VARCHAR2(20) ' ||
               ' ,RSRV_INWON NUMBER DEFAULT 1 ' ||
               ' ,RSRV_SUBJECT VARCHAR2(50) ' ||
               ' ,RSRV_MEMO VARCHAR2(200) ' ||
               ' ,WRITER NUMBER ' ||
               ' ,WRITE_DATE DATE DEFAULT SYSDATE ' ||
               ' )';

      --dbms_output.put_line(v_str);
	  
      EXECUTE IMMEDIATE v_str;

      EXECUTE IMMEDIATE ' ALTER TABLE ' || v_table_name || 
                        ' ADD CONSTRAINT PK_' || v_table_name ||
                        '   PRIMARY KEY (RSRV_NUM)';

      EXECUTE IMMEDIATE 'COMMENT ON TABLE ' || v_table_name || ' IS ''예약관리''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_NUM IS ''예약번호''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_DATE IS ''예약일자''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_TIME IS ''예약시간''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_NAME IS ''예약자명''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_TELNO IS ''예약전화번호''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_INWON IS ''인원''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_SUBJECT IS ''제목''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.RSRV_MEMO IS ''메모''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.WRITER IS ''작성일자''';
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN ' || v_table_name || '.WRITE_DATE IS ''작성일자''';
	  
      --------------------------------------------
      --- SEQUENSE 추가(2024.04.07)
      --------------------------------------------
      EXECUTE IMMEDIATE 'CREATE SEQUENCE ' || v_table_name || '_SEQ '
                       || ' INCREMENT BY 1 ' 
					   || ' START WITH 1 ';
					   
   EXCEPTION
      WHEN OTHERS THEN
      dbms_output.put_line(sqlerrm); 
   END;
END;
/


CREATE SEQUENCE ingno
MINVALUE 1;

CREATE SEQUENCE inpno
MINVALUE 1;


-------------- 상품 테이블 --------------- 
CREATE OR REPLACE PROCEDURE create_goods_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    -- 유저 아이디를 이용하여 테이블 이름 생성
    v_table_name := 'TB_GOODS_' || p_user_id;

    -- 테이블 생성
    EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
        ID NUMBER,
        GOODS_NO NUMBER NOT NULL PRIMARY KEY,
        GOODS_NAME VARCHAR2(300) NOT NULL,
        GOODS_UNIT VARCHAR2(30),
        GOODS_PRICE NUMBER,
        NATION VARCHAR2(30) DEFAULT NULL
    )';
EXCEPTION
    WHEN OTHERS THEN
        NULL; 
END;

/
-- 재고 테이블
CREATE OR REPLACE PROCEDURE create_inventory_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    -- 유저 아이디를 이용하여 테이블 이름 생성
    v_table_name := 'TB_INVENTORY_' || p_user_id;

    -- 동적 SQL 실행
    EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
                        GOODS_NO NUMBER PRIMARY KEY,
                        PD_QUANTITY NUMBER NOT NULL,
                        MIN_ALARM_QUANTITY NUMBER,
                        MIN_ORDER_QUANTITY NUMBER,
                        FOREIGN KEY (GOODS_NO) REFERENCES TB_GOODS_' || p_user_id || '(GOODS_NO) ON DELETE CASCADE
                    )';
EXCEPTION
    WHEN OTHERS THEN
        NULL; 
END;

/

-- 발주처 테이블
CREATE OR REPLACE PROCEDURE create_produce_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    -- 유저 아이디를 이용하여 테이블 이름 생성
    v_table_name := 'TB_PRODUCE_' || p_user_id;

    -- 동적 SQL 실행
    EXECUTE IMMEDIATE 'CREATE TABLE ' || v_table_name || '(
            GOODS_NO NUMBER PRIMARY KEY,
            PD_NO NUMBER,
            PD_NAME VARCHAR2(300) NOT NULL,
            PRODUCER VARCHAR2(20),
            PD_PHONE VARCHAR2(30),
            PD_ADDRESS VARCHAR2(255),
            FOREIGN KEY (GOODS_NO) REFERENCES TB_GOODS_' || p_user_id || '(GOODS_NO) ON DELETE CASCADE
        )';
END;


/

-- 명세서 테이블
CREATE OR REPLACE PROCEDURE create_specify_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    -- 유저 아이디를 이용하여 테이블 이름 생성
    v_table_name := 'TB_SPECIFY_' || p_user_id;

    -- 동적 SQL 실행하여 테이블 생성
    EXECUTE IMMEDIATE '
        CREATE TABLE ' || v_table_name || '(
            ID NUMBER,
            PD_DATE VARCHAR2(10),
            PD_PRICE NUMBER,
            PD_MONTH VARCHAR2(10)
        )';

    -- 트리거 생성을 위한 동적 SQL 실행
    EXECUTE IMMEDIATE '
        CREATE OR REPLACE TRIGGER ' || v_table_name || '_update_pd_month_trigger
        BEFORE INSERT OR UPDATE ON ' || v_table_name || '
        FOR EACH ROW
        BEGIN
            IF :NEW.PD_DATE IS NOT NULL THEN
                :NEW.PD_MONTH := SUBSTR(:NEW.PD_DATE, 1, LENGTH(:NEW.PD_DATE) - 3);
            END IF;
        END;';
END;
/



CREATE OR REPLACE PROCEDURE create_sales_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_SALES_' || p_user_id;

    EXECUTE IMMEDIATE '
        CREATE TABLE ' || v_table_name || '(
            SALE_ID NUMBER CONSTRAINT PK_' || v_table_name || ' PRIMARY KEY,
            EMP_ID NUMBER NOT NULL,
            SALE_DATE DATE DEFAULT SYSDATE,
            AMOUNT NUMBER,
            CONSTRAINT FK_' || v_table_name || '_EMP FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || ' (EMP_ID)
        )';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

CREATE OR REPLACE PROCEDURE create_salaryinfo_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_SALARYINFO_' || p_user_id;

    EXECUTE IMMEDIATE '
        CREATE TABLE ' || v_table_name || '(
            SALARY_ID NUMBER CONSTRAINT PK_' || v_table_name || ' PRIMARY KEY,
            EMP_ID NUMBER NOT NULL,
            PAY_DATE DATE DEFAULT SYSDATE,
            SALARY_AMOUNT NUMBER,
            CONSTRAINT FK_' || v_table_name || '_EMP FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || ' (EMP_ID)
        )';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

CREATE OR REPLACE PROCEDURE create_additionalwages_table (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_ADDITIONALWAGES_' || p_user_id;

    EXECUTE IMMEDIATE '
        CREATE TABLE ' || v_table_name || '(
            WAGE_ID NUMBER CONSTRAINT PK_' || v_table_name || ' PRIMARY KEY,
            EMP_ID NUMBER NOT NULL,
            WAGE_DATE DATE DEFAULT SYSDATE,
            WAGE_AMOUNT NUMBER,
            CONSTRAINT FK_' || v_table_name || '_EMP FOREIGN KEY (EMP_ID) REFERENCES TB_EMPLOYEE_' || p_user_id || ' (EMP_ID)
        )';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

CREATE OR REPLACE PROCEDURE DROP_TB_MENU (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_MENU_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/

CREATE OR REPLACE PROCEDURE DROP_TB_POS (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_POS_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/


CREATE OR REPLACE PROCEDURE DROP_TB_TABLE (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_TABLE_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/
-- 드랍 프로시져 -------------------------------
CREATE OR REPLACE PROCEDURE DROP_TB_INVENTORY (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_INVENTORY_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/


CREATE OR REPLACE PROCEDURE DROP_TB_PRODUCE (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_PRODUCE_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/


CREATE OR REPLACE PROCEDURE DROP_TB_SPECIFY (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_SPECIFY_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/

CREATE OR REPLACE PROCEDURE DROP_TB_GOODS (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_GOODS_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    END;
END;
/
CREATE OR REPLACE PROCEDURE PR_DROP_TB_RESERVATION_TABLE (
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(200);
    v_str1 VARCHAR2(1000);
    v_str2 VARCHAR2(1000);
BEGIN
   -- 유저 아이디를 이용하여 테이블 이름 생성
   v_table_name := 'TB_RESERVATION_' || RTRIM(LTRIM(TO_CHAR(p_user_id)));
   dbms_output.put_line(v_table_name);
   
   BEGIN
      v_str1 := 'DROP TABLE ' || v_table_name || ' CASCADE CONSTRAINTS';
      EXECUTE IMMEDIATE v_str1;
      --dbms_output.put_line(v_str1);
	  
	  --- 2024.04.07 추가
      v_str2 := 'DROP SEQUENCE ' || v_table_name || '_SEQ ';
      EXECUTE IMMEDIATE v_str2;
      --dbms_output.put_line(v_str2);

   EXCEPTION
      WHEN OTHERS THEN
         dbms_output.put_line(sqlerrm); 
   END;
END;
/
-- TB_EMPLOYEE 테이블 삭제 프로시저
CREATE OR REPLACE PROCEDURE DROP_TB_EMPLOYEE(
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_EMPLOYEE_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -942 THEN -- 테이블이 존재하지 않을 때의 예외는 무시
                RAISE;
            END IF;
    END;
END;
/

-- TB_COMMUTE_INFO 테이블 삭제 프로시저
CREATE OR REPLACE PROCEDURE DROP_TB_COMMUTE_INFO(
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_COMMUTE_INFO_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -942 THEN
                RAISE;
            END IF;
    END;
END;
/

-- TB_CALENDAR 테이블 삭제 프로시저
CREATE OR REPLACE PROCEDURE DROP_TB_CALENDAR(
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_CALENDAR_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -942 THEN
                RAISE;
            END IF;
    END;
END;
/

-- TB_SALARY_INFO 테이블 삭제 프로시저
CREATE OR REPLACE PROCEDURE DROP_TB_SALARY_INFO(
    p_user_id IN NUMBER
)
IS
    v_table_name VARCHAR2(100);
BEGIN
    v_table_name := 'TB_SALARY_INFO_' || p_user_id;
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ' || v_table_name || '
                                    CASCADE CONSTRAINTS';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE != -942 THEN
                RAISE;
            END IF;
    END;
END;
/

CREATE OR REPLACE PROCEDURE drop_user_tables (
    p_user_id IN NUMBER
)
IS
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE TB_ADDITIONALWAGES_' || TO_CHAR(p_user_id,99999) || ' CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE TB_SALARYINFO_' || TO_CHAR(p_user_id,99999) || ' CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE TB_SALES_' || TO_CHAR(p_user_id,99999) || ' CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/
delete TB_INCONVINIENCE_BOARD_REPLY;
delete tb_inconvinience_board;
-- 10개의 더미 데이터 삽입 (컬럼을 지정하지 않고, STATUS에 랜덤으로 1부터 3까지, WRITER에 랜덤으로 1부터 10까지의 값 삽입)
INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 1, '장시간 대기열로 인한 불편', '오랜 대기 시간으로 인한 불편을 공유합니다.', SYSDATE - 10, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 2, '매장 내 청결도 저하', '매장 내 청결 상태가 저하되어 있어 불편합니다.', SYSDATE - 9, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 3, '제품 불량으로 인한 교환 어려움', '구매한 제품이 불량이라 교환하려고 하니 어려움이 있습니다.', SYSDATE - 8, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 4, '매장 내 가격표 미표시', '상품의 가격표가 미표시되어 있어 가격을 확인하기 어렵습니다.', SYSDATE - 7, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 5, '서비스 태도 불만', '매장 직원의 서비스 태도가 불만족스럽습니다.', SYSDATE - 6, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 6, '매장 내 장애물 증가', '매장 내 장애물이 늘어나서 이동하기 어려워졌습니다.', SYSDATE - 5, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 7, '환불 처리 지연', '상품 환불 처리가 지연되어 있어 불편합니다.', SYSDATE - 4, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 8, '온라인 주문 오류', '온라인 주문 시스템에서 오류가 발생하여 주문이 어려워졌습니다.', SYSDATE - 3, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 9, '주차장 혼잡', '매장 주변 주차장이 혼잡하여 주차하기 어렵습니다.', SYSDATE - 2, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 10, '매장 내 냄새', '매장 내부에서 불쾌한 냄새가 나서 불편합니다.', SYSDATE - 1, SYSDATE, 1);

-- 10개의 더미 데이터 추가
INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 1, '결제 시스템 오작동', '매장 내 결제 시스템이 작동하지 않아 결제가 어렵습니다.', SYSDATE - 10, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 2, '반품 처리 지연', '상품 반품 처리가 오랜 시간이 걸려 불편합니다.', SYSDATE - 9, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 3, '상품 배송 지연', '인터넷 주문한 상품의 배송이 예정보다 늦어져 불편합니다.', SYSDATE - 8, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 4, '매장 내 주차장 부족', '매장 주변 주차장이 부족하여 주차하기 어렵습니다.', SYSDATE - 7, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 5, '제품 설명 미흡', '구매한 제품의 설명이 부족하여 사용법을 알기 어렵습니다.', SYSDATE - 6, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 6, '매장 내 음악 소리 큼', '매장 내에서 틀어지는 음악이 너무 시끄럽습니다.', SYSDATE - 5, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 7, '장바구니 기능 오류', '온라인 쇼핑몰에서 장바구니에 상품을 담을 때 오류가 발생합니다.', SYSDATE - 4, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 8, '상품 포장 미흡', '구매한 상품의 포장이 미흡하여 상품이 손상될 우려가 있습니다.', SYSDATE - 3, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 9, '매장 내 온도 조절 미흡', '매장 내 온도가 너무 높아서 불편합니다.', SYSDATE - 2, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 10, '매장 내 화장실 청결상태 불량', '매장 내 화장실이 청결하지 않아 사용하기 불편합니다.', SYSDATE - 1, SYSDATE, 2);

-- 10개의 더미 데이터 추가
INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 1, '상품 포장 부실', '구매한 상품의 포장이 부실하여 상품이 손상되었습니다.', SYSDATE - 10, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 2, '영수증 출력 지연', '매장에서 영수증 출력이 지연되어 있어 불편합니다.', SYSDATE - 9, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 3, '상품정보 미표기', '상품에 대한 정보가 불분명하여 선택에 어려움이 있습니다.', SYSDATE - 8, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 4, '매장 내 조명 부실', '매장 내 일부 구역의 조명이 부실하여 어둡습니다.', SYSDATE - 7, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 5, '매장 내 가격 오류', '매장 내 상품 가격표가 틀렸습니다.', SYSDATE - 6, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 6, '장바구니 기능 미작동', '온라인 쇼핑몰에서 장바구니에 상품을 담을 수 없습니다.', SYSDATE - 5, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 7, '상품 미리보기 기능 오류', '온라인 쇼핑몰에서 상품 미리보기 기능이 작동하지 않습니다.', SYSDATE - 4, SYSDATE, 3);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 8, '배송 지연', '인터넷 주문한 상품의 배송이 예정보다 늦어져 불편합니다.', SYSDATE - 3, SYSDATE, 1);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 9, '매장 내 공간 활용 부족', '매장 내 공간이 협소하여 불편합니다.', SYSDATE - 2, SYSDATE, 2);

INSERT INTO TB_INCONVINIENCE_BOARD 
VALUES 
(INCONVINIENCE_SEQ.NEXTVAL, 10, '매장 내 무선 인터넷 불안정', '매장 내 무선 인터넷 연결이 불안정하여 사용하기 어렵습니다.', SYSDATE - 1, SYSDATE, 3);

--------------댓글
-- status가 3인 게시글에 댓글 작성
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(29, 1000, SYSDATE - 1, '불편사항이 해결되어 기쁘게 생각합니다. 감사합니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(11, 1001, SYSDATE - 4, '해당 불편사항이 해결되었습니다. 감사합니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(12, 1002, SYSDATE - 5, '해당 사안은 해결되었습니다.');

-- status가 2인 게시글에 대해 "조치 중" 댓글 작성
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(2, 1003, SYSDATE - 2, '조치 중입니다. 최대한 빨리 해결하도록 하겠습니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(30, 1004, SYSDATE - 3, '빠른 시일 내에 조치할 수 있도록 노력하겠습니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(6, 1005, SYSDATE - 4, '조치 중입니다. 불편을 드려 죄송합니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(27, 1000, SYSDATE - 1, '현재 조치 중입니다. 조속한 완료를 위해 노력하겠습니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(28, 1001, SYSDATE - 2, '빠른 시일 내에 조치될 수 있도록 노력하겠습니다.');
INSERT INTO TB_INCONVINIENCE_BOARD_REPLY (BOARD_NO, WRITER, WRITE_DATE, COMMENT_CONTENT) VALUES 
(10,1002 , SYSDATE - 3, '조치 중이며, 빠른 완료를 위해 노력하고 있습니다.');

commit;
delete tb_notice;
-- 10개의 더미 데이터 생성 INSERT 문
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '공지사항 1', '이번 주에는 새로운 기능을 추가했습니다.', to_date('2024-04-08','YYYY-MM-DD'), to_date('2024-04-08','YYYY-MM-DD'), 100, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '중요 공지', '서비스 정상화 안내', to_date('2024-04-07','YYYY-MM-DD'), to_date('2024-04-08','YYYY-MM-DD'), 150, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '주의: 업데이트 예정', '내일부터 일시적으로 서비스가 중단될 예정입니다.', to_date('2024-04-06','YYYY-MM-DD'), to_date('2024-04-07','YYYY-MM-DD'), 200, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1004, '긴급 공지', '시스템 장애로 인해 서비스가 중단됩니다. 조속히 복구하겠습니다.', to_date('2024-04-05','YYYY-MM-DD'), to_date('2024-04-06','YYYY-MM-DD'), 300, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '필독: 서비스 이용 안내', '새로운 서비스 정책이 시행됩니다. 모두 확인해주세요.', to_date('2024-04-04','YYYY-MM-DD'), to_date('2024-04-05','YYYY-MM-DD'), 250, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '주말 서비스 점검 안내', '주말 동안 서비스 점검이 진행될 예정입니다.', to_date('2024-04-03','YYYY-MM-DD'), to_date('2024-04-04','YYYY-MM-DD'), 180, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '긴급공지: 시스템 업그레이드', '내일 새벽 2시부터 시스템 업그레이드 작업이 진행될 예정입니다.', to_date('2024-04-02','YYYY-MM-DD'), to_date('2024-04-03','YYYY-MM-DD'), 220, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1005, '주요 변경사항 안내', '서비스 이용 방법이 변경되었습니다. 자세한 내용은 홈페이지를 참조해주세요.', to_date('2024-04-01','YYYY-MM-DD'), to_date('2024-04-02','YYYY-MM-DD'), 170, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '서비스 이용 시 유의사항', '서비스 이용 시 개인정보 보호에 유의하세요.', to_date('2024-03-31','YYYY-MM-DD'), to_date('2024-04-01','YYYY-MM-DD'), 190, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1005, '서비스 업데이트 공지', '서비스 업데이트를 완료했습니다. 새로운 기능을 즐겨보세요.', to_date('2024-03-30','YYYY-MM-DD'), to_date('2024-03-31','YYYY-MM-DD'), 210, '3');
-- 추가로 10개의 더미 데이터 생성 INSERT 문
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '서비스 이용 안내', '서비스 이용 시간이 변경되었습니다. 새로운 시간에 맞춰 이용해주세요.', to_date('2024-03-29','YYYY-MM-DD'), to_date('2024-03-30','YYYY-MM-DD'), 220, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1004, '서비스 장애 안내', '일시적인 서비스 장애로 불편을 드려 죄송합니다. 최대한 빠른 시일 내에 복구하겠습니다.', to_date('2024-03-28','YYYY-MM-DD'), to_date('2024-03-29','YYYY-MM-DD'), 180, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '주말 휴무 안내', '다음 주 주말은 휴무입니다. 이 점 참고하시어 이용 부탁드립니다.', to_date('2024-03-27','YYYY-MM-DD'), to_date('2024-03-28','YYYY-MM-DD'), 250, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1004, '기술 지원 센터 운영 안내', '기술 지원 센터의 운영시간이 변경되었습니다. 자세한 내용은 공지를 참고해주세요.', to_date('2024-03-26','YYYY-MM-DD'), to_date('2024-03-27','YYYY-MM-DD'), 300, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '정기 점검 안내', '다음 주에 정기 점검이 예정되어 있습니다. 이용에 참고하시기 바랍니다.', to_date('2024-03-25','YYYY-MM-DD'), to_date('2024-03-26','YYYY-MM-DD'), 210, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '서비스 이용 방법 안내', '새로운 기능 사용 방법에 대한 안내입니다. 자세한 내용은 홈페이지를 참조해주세요.', to_date('2024-03-24','YYYY-MM-DD'), to_date('2024-03-25','YYYY-MM-DD'), 270, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '새로운 기능 출시', '오늘부로 새로운 기능을 출시했습니다. 이용해보세요!', to_date('2024-03-23','YYYY-MM-DD'), to_date('2024-03-24','YYYY-MM-DD'), 190, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1003, '서비스 업그레이드 예정', '다음 주에 서비스 업그레이드 작업이 있을 예정입니다. 이용에 불편을 드려 죄송합니다.', to_date('2024-03-22','YYYY-MM-DD'), to_date('2024-03-23','YYYY-MM-DD'), 230, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '서비스 이용 안내', '서비스 이용 중 발생한 문제 해결을 위한 안내입니다. 자세한 내용은 홈페이지를 참조해주세요.', to_date('2024-03-21','YYYY-MM-DD'), to_date('2024-03-22','YYYY-MM-DD'), 240, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1003, '서비스 이용 안내', '서비스 이용 방법에 대한 안내입니다. 자세한 내용은 홈페이지를 참조해주세요.', to_date('2024-03-20','YYYY-MM-DD'), to_date('2024-03-21','YYYY-MM-DD'), 260, '2');
-- 추가로 10개의 더미 데이터 생성 INSERT 문
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '서비스 장애 안내', '현재 서비스에 장애가 발생하여 빠른 시일 내에 해결하겠습니다. 이용에 불편을 드려 죄송합니다.', to_date('2024-03-19','YYYY-MM-DD'), to_date('2024-03-20','YYYY-MM-DD'), 180, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1003, '새로운 기능 출시', '새로운 기능을 출시하였습니다. 이용자 여러분들의 많은 관심 부탁드립니다.', to_date('2024-03-18','YYYY-MM-DD'), to_date('2024-03-19','YYYY-MM-DD'), 220, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '주요 업데이트 예고', '다음 주에 주요한 업데이트가 예정되어 있습니다. 기대해주시기 바랍니다.', to_date('2024-03-17','YYYY-MM-DD'), to_date('2024-03-18','YYYY-MM-DD'), 250, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '시스템 점검 안내', '서비스 시스템 점검으로 인해 일시적인 접속이 불가능할 수 있습니다. 양해 부탁드립니다.', to_date('2024-03-16','YYYY-MM-DD'), to_date('2024-03-17','YYYY-MM-DD'), 200, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '이용약관 변경', '이용약관이 변경되었습니다. 변경된 내용을 확인하시고 동의해주세요.', to_date('2024-03-15','YYYY-MM-DD'), to_date('2024-03-16','YYYY-MM-DD'), 240, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1003, '서비스 업데이트 안내', '새로운 기능을 추가한 업데이트가 있습니다. 자세한 내용은 공지를 참고해주세요.', to_date('2024-03-14','YYYY-MM-DD'), to_date('2024-03-15','YYYY-MM-DD'), 280, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1002, '서비스 이용 안내', '서비스 이용 중 발생한 문제를 해결하였습니다. 이용에 불편을 드려 죄송합니다.', to_date('2024-03-13','YYYY-MM-DD'), to_date('2024-03-14','YYYY-MM-DD'), 260, '2');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1003, '이용권 구매 안내', '이용권을 구매하면 추가 혜택이 있습니다. 자세한 내용은 이용권 페이지를 확인해주세요.', to_date('2024-03-12','YYYY-MM-DD'), to_date('2024-03-13','YYYY-MM-DD'), 230, '1');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1001, '서비스 이용 방법 안내', '새로운 기능 사용 방법에 대한 안내입니다. 자세한 내용은 공지를 참고해주세요.', to_date('2024-03-11','YYYY-MM-DD'), to_date('2024-03-12','YYYY-MM-DD'), 290, '3');
Insert into C##SSMS.TB_NOTICE (NOTICE_NO, WRITER, NOTICE_TITLE, NOTICE_CONTENT, WRITE_DATE, MODIFY_DATE, READ_COUNT, IMPORTANCY) values (NOTICE_SEQ.NEXTVAL, 1000, '공지사항 안내', '서비스 이용과 관련된 공지사항입니다. 이용자 여러분의 이해와 협조를 부탁드립니다.', to_date('2024-03-10','YYYY-MM-DD'), to_date('2024-03-11','YYYY-MM-DD'), 270, '2');
commit;
delete tb_subscribe;
delete tb_subscribe_payment;
-- 더미 데이터 생성 INSERT 문 (숫자만)
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Basic Plan', 10000, 3);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Standard Plan', 20000, 6);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Premium Plan', 30000, 12);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Gold Plan', 40000, 24);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Platinum Plan', 50000, 36);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Trial Plan', 0, 1);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Family Plan', 60000, 12);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Student Plan', 8000, 6);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'Corporate Plan', 100000, 24);
Insert into C##SSMS.TB_SUBSCRIBE (SUBSCRIBE_NO, SUBSCRIBE_NAME, PRICE, SUBSCRIBE_DATE) values (SUBSCRIBE_SEQ.NEXTVAL, 'VIP Plan', 120000, 12);
-- 더미 데이터 생성 INSERT 문
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Basic Plan', 10000, 1, 'Credit Card', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Standard Plan', 20000, 2, 'PayPal', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Premium Plan', 30000, 3, 'Credit Card', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Gold Plan', 40000, 4, 'Bank Transfer', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Platinum Plan', 50000, 5, 'Credit Card', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Trial Plan', 0, 6, 'Free Trial', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Family Plan', 60000, 7, 'Credit Card', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Student Plan', 8000, 8, 'PayPal', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'Corporate Plan', 100000, 9, 'Credit Card', SYSDATE);
Insert into C##SSMS.TB_SUBSCRIBE_PAYMENT (PAY_NO, SUBSCRIBE_NAME, AMOUNT, USER_ID, PAY_METHOD, PAY_DATE) values (SUBSCRIBE_PAYMENT_SEQ, 'VIP Plan', 120000, 10, 'Credit Card', SYSDATE);

commit;
delete tb_user_suspension;
-- 더미 데이터 생성 INSERT 문
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 1, to_date('2024-04-01', 'YYYY-MM-DD'), to_date('2024-04-10', 'YYYY-MM-DD'), '부적절한 홍보', '부적절한 홍보로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 2, to_date('2024-03-15', 'YYYY-MM-DD'), to_date('2024-03-20', 'YYYY-MM-DD'), '욕설 사용', '욕설 사용으로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 3, to_date('2024-02-10', 'YYYY-MM-DD'), to_date('2024-02-20', 'YYYY-MM-DD'), '불법 콘텐츠 게시', '불법 콘텐츠 게시로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 4, to_date('2024-01-05', 'YYYY-MM-DD'), to_date('2024-01-15', 'YYYY-MM-DD'), '스팸 전송', '스팸 전송으로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 5, to_date('2023-12-20', 'YYYY-MM-DD'), to_date('2023-12-25', 'YYYY-MM-DD'), '악성 코드 게시', '악성 코드 게시로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 6, to_date('2023-11-15', 'YYYY-MM-DD'), to_date('2023-11-30', 'YYYY-MM-DD'), '사용자 허가 없는 정보수집', '사용자 허가 없는 정보수집으로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 7, to_date('2023-10-10', 'YYYY-MM-DD'), to_date('2023-10-20', 'YYYY-MM-DD'), '욕설 사용', '욕설 사용으로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 8, to_date('2023-09-05', 'YYYY-MM-DD'), to_date('2023-09-15', 'YYYY-MM-DD'), '부적절한 광고', '부적절한 광고로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 9, to_date('2023-08-01', 'YYYY-MM-DD'), to_date('2023-08-10', 'YYYY-MM-DD'), '욕설 사용', '욕설 사용으로 인한 계정 정지 조치');
Insert into C##SSMS.TB_USER_SUSPENSION (SUSPENSION_NO, TARGET_ACCOUNT, SUSPENSION_START, SUSPENSION_END, SUSPENSION_TITLE, SUSPENSION_CONTENT) values (SUSPENSION_SEQ.NEXTVAL, 10, to_date('2023-07-20', 'YYYY-MM-DD'), to_date('2023-07-25', 'YYYY-MM-DD'), '부적절한 홍보', '부적절한 홍보로 인한 계정 정지 조치');
commit;


